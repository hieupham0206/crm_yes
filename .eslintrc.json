{
  "env": {
    "browser": true,
    "commonjs": true,
    "es6": true
  },
  "globals": {
    "mApp": true,
    "mUtil": true,
    "lang": true,
    "flash": true,
    "$": true,
    "jQuery": true,
    "axios": true,
    "_": true,
    "bootbox": true,
    "route": true,
    "Highcharts": true
  },
  "extends": "eslint:recommended",
  "parserOptions": {
    "sourceType": "module"
  },
  "rules": {
    // treat var statements as if they were block scoped
    "block-scoped-var": 2,
    // specify the maximum cyclomatic complexity allowed in a program
    "complexity": ["error", 4],
    // require return statements to either always or never specify values
    "consistent-return": 0,
    // specify curly brace conventions for all control statements
    "curly": [2, "all"],
    // require default case in switch statements
    "default-case": 1,
    // require the use of === and !==
    "eqeqeq": 2,
    // enforce consistent indentation
    "indent": ["error", "tab"],
    // enforce consistent linebreak style
    "linebreak-style": 0,
    // disallow the use of console
    "no-console": 0,
    // disallow the use of alert, confirm, and prompt
    "no-alert": 1,
    // disallow the use of arguments.caller or arguments.callee
    "no-caller": 2,
    // disallow comparisons to null without a type-checking operator
    "no-eq-null": 0,
    // disallow use of eval()
    "no-eval": 2,
    // disallow the use of eval()-like methods
    "no-implied-eval": 2,
    // disallow function declarations and expressions inside loop statements
    "no-loop-func": 1,
    // disallow multiline strings
    "no-multi-str": 1,
    // disallow comparisons where both sides are exactly the same
    "no-self-compare": 2,
    // disallow empty functions
    "no-empty-function": 1,
    // disallow with statements
    "no-with": 2,
    // disallow the use of variables before they are defined
    "no-use-before-define": 2,
    // enforce the consistent use of either backticks, double, or single quotes
    "quotes": ["warn", "single"],
    // require or disallow semicolons instead of ASI
    "semi": ["warn", "never"],
    // requires to declare all vars on top of their containing scope
    "vars-on-top": 2,
    // enforce camelcase naming convention
    "camelcase": [1, {"properties": "never"}]
  }
}