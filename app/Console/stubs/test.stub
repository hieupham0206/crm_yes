<?php

namespace Tests\Feature;

use App\Models\{{modelName}};
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class {{modelName}}Test extends TestCase {
	private ${{crudNameSingular}};

	use DatabaseMigrations;

	protected function setUp() {
		parent::setUp();

		$this->{{crudNameSingular}} = factory( {{modelName}}::class )->create();
	}

	public function test_unauthorized_user_cannot_crud_{{crudNameSingular}}() {
		$this->withExceptionHandling()->unauthorizedUserSignIn();

		$this->get( route( '{{crudNameSingular}}s.index' ) )->assertStatus( 403 );

		$this->get( route( '{{crudNameSingular}}s.create' ) )->assertStatus( 403 );

		$this->get( route( '{{crudNameSingular}}s.edit', $this->{{crudNameSingular}}->id ) )->assertStatus( 403 );

		$this->get( route( '{{crudNameSingular}}s.show', $this->{{crudNameSingular}}->id ) )->assertStatus( 403 );

		$this->post( route( '{{crudNameSingular}}s.destroy', $this->{{crudNameSingular}}->id ), ['_method' => 'delete'] )->assertStatus( 403 );
	}

	public function test_authorized_user_can_read_{{crudNameSingular}}() {
		$this->authorizedUserSignIn();

		$this->get( route( '{{crudNameSingular}}s.index' ) )->assertStatus( 200 );

		$this->get( route( '{{crudNameSingular}}s.show', $this->{{crudNameSingular}}->id ) )->assertStatus( 200 );
	}

	public function test_authorized_user_can_create_{{crudNameSingular}}() {
		$this->authorizedUserSignIn();

		$this->get( route( '{{crudNameSingular}}s.create' ) )->assertStatus( 200 );

		${{crudNameSingular}} = make({{modelName}}::class);
		$this->post( route( '{{crudNameSingular}}s.store' ), ${{crudNameSingular}}->toArray() )
		     ->assertRedirect( route( '{{crudNameSingular}}s.index' ) );
	}

	public function test_authorized_user_can_edit_{{crudNameSingular}}() {
		$this->authorizedUserSignIn();

		$this->get( route( '{{crudNameSingular}}s.edit', $this->{{crudNameSingular}}->id ) )
		     ->assertStatus( 200 )
		     ->assertSee( $this->{{crudNameSingular}}->title );

		${{crudNameSingular}} = create({{modelName}}::class);

		$this->put( route( '{{crudNameSingular}}s.update', ${{crudNameSingular}}->id ), ${{crudNameSingular}}->toArray())->assertRedirect( route( '{{crudNameSingular}}s.index' ) );

		$this->assertDatabaseHas( '{{crudNameSingular}}s', [
			'id' => ${{crudNameSingular}}->id
		] );
	}

	public function test_authorized_user_can_delete_{{crudNameSingular}}() {
		$this->authorizedUserSignIn();

		${{crudNameSingular}} = create( {{modelName}}::class );

		$this->delete( route( '{{crudNameSingular}}s.destroy', ${{crudNameSingular}}->id ))->assertStatus( 200 );

		$this->assertSoftDeleted( '{{crudNameSingular}}s', [
			'id' => ${{crudNameSingular}}->id
		] );
	}

	public function test_authorized_user_can_delete_multiple_{{crudNameSingular}}() {
  		$this->authorizedUserSignIn();

  		${{crudNameSingular}}1 = create( {{modelName}}::class, null );
  		${{crudNameSingular}}2 = create( {{modelName}}::class, null );

  		$this->delete( route( '{{crudNameSingular}}s.destroys', [
  			'ids' => [${{crudNameSingular}}1->id, ${{crudNameSingular}}2->id]
  		] ) )->assertStatus( 200 );

  		$this->assertSoftDeleted( '{{crudNameSingular}}s', [
  			'id' => ${{crudNameSingular}}1->id
  		] );

  		$this->assertSoftDeleted( '{{crudNameSingular}}s', [
  			'id' => ${{crudNameSingular}}2->id
  		] );
  	}
}
